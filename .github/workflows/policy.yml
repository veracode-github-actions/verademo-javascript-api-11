name: Veracode Auto-Packaging and Scan

on:
  push:
    branches:
      - main  # Change branch if needed
  pull_request:

permissions: 
    security-events: write

jobs:
  veracode-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Veracode CLI and Package Scan
        run: |
          curl -fsS https://tools.veracode.com/veracode-cli/install | sh
          ./veracode package -das ${{ github.workspace }} --output ./verascan

          # Check if the verascan directory exists
          if [ ! -d "verascan" ]; then
            echo "Error: verascan directory not found."
            exit 1
          fi

      # - name: Upload Verascan Artifact (Optional)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: VeracodeScanResults
      #     path: verascan

      - name: Veracode Upload And Scan
        uses: veracode/veracode-uploadandscan-action@0.2.7
        with:
            appname: 'Recent'
            createprofile: false
            filepath: './verascan'
            version: ${{ github.run_id }}
            vid: '${{ secrets.VID }}'
            vkey: '${{ secrets.VKEY }}'
            # createsandbox: 'false'
            # sandboxname: 'SANDBOXNAME'
            scantimeout: 120
            # exclude: '*.js'
            # include: '*.war'
            criticality: 'VeryHigh'
            deleteincompletescan: 2

  get-policy-flaws:
    runs-on: ubuntu-latest
    container: 
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.VID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VKEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=NodeGoat" | jq -r '._embedded.applications[0].guid') 
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=STATIC&violates_policy=True&size=${total_flaws}" > results.json

      - name: Upload filtered scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: results.json

      - name: Convert results to SARIF
        uses: veracode/veracode-pipeline-scan-results-to-sarif@v2.0.4
        with:
          scan-type: "policy"
          results-json: "results.json"
          output-results-sarif: "veracode-results.sarif"

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: veracode-results.sarif